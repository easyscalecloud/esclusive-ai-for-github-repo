# comprehensive github action yml reference: https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions

---
# Name of the workflow as it will appear in the GitHub Actions tab
# ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#name
name: CI

# Define the events that will trigger this workflow to run
# ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#on
on:
  push: # Workflow will run on any push event to the main branch
    branches: ["main"]
  pull_request: # Workflow will run on any pull request targeting the main branch
    branches: ["main"]
  workflow_dispatch: # Allows you to manually trigger the workflow from the GitHub UI

# ------------------------------------------------------------------------------
# Custom workflow level variables
# ------------------------------------------------------------------------------
# Define environment variables at the workflow level - accessible to all jobs
env:
  PACKAGE_NAME: "esclusive_ai_for_github_repo"

jobs:
  tests:
    # Dynamic name that includes the current OS and Python version from the matrix
    name: "${{ matrix.os }} Python ${{ matrix.python-version }}"
    # Specifies the runner environment (VM) for the job - dynamically set from the matrix
    # GitHub provides various VM options like ubuntu, windows, and macOS
    # For all available VM runtime, see this: https://docs.github.com/en/free-pro-team@latest/actions/reference/specifications-for-github-hosted-runners
    runs-on: "${{ matrix.os }}"
    env: # Define environment variables that will be available to all steps in this job
      # This comma-separated list defines which Python versions should have coverage reports
      # Will be used later to conditionally upload coverage reports to Codecov
      USING_COVERAGE: "3.9,3.10,3.11,3.12,3.13"
    # ref: https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
    strategy:
      # The matrix strategy allows you to run multiple combinations of configurations
      # This will create a separate job for each combination of OS and Python version
      matrix:
        # Define the operating systems to test on
#        os: ["ubuntu-latest", "windows-latest"]
        os: ["ubuntu-latest", ] # Commented out configurations for quick debugging
#        os: ["windows-latest", ] # Commented out configurations for quick debugging
        # Define the Python versions to test with
#        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        python-version: ["3.11", ] # Commented out configurations for quick debugging
        # Exclude specific combinations from the matrix
        exclude:
          - os: windows-latest # this one has no effect, it is for demonstration use only
            python-version: 2.7
    steps:
      # Check out the repository code to the runner
      - uses: "actions/checkout@v4" # https://github.com/marketplace/actions/checkout
      # First Python setup specifically for installing Poetry
      - uses: "actions/setup-python@v5" # https://github.com/marketplace/actions/setup-python
        with:
          python-version: "${{ matrix.python-version }}"
          cache: "pip" # Enable pip dependency caching to speed up future runs
          # Cache dependencies based on this file, which contains Poetry installation requirements
          # This is separate from project dependencies - just for installing Poetry itself
          cache-dependency-path: requirements-poetry.txt
      # Install Poetry using pip from the requirements file
      - name: Install poetry
        run: |
          python -m pip install -r requirements-poetry.txt
      # Second Python setup specifically for project dependencies managed by Poetry
      - uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python-version }}"
          cache: "poetry" # Enable Poetry dependency caching
          # Use poetry.lock as the cache key - Poetry will only re-download cache if this file changes
          cache-dependency-path: poetry.lock
      # OS-specific setup for Linux (currently empty but can be used for system dependencies)
      # The 'if' condition makes this step run only on ubuntu runners
      # For condition steps, you should put "if" at begin, and use single quote for logical expression
      - if: matrix.os == 'ubuntu-latest'
        name: "Install dependencies on MacOS or Linux"
        # Shell options: x=print commands before execution, e=exit on error
        run: |
          set -xe
      # Install project dependencies using Poetry
      - name: "Install dependencies"
        run: |
          pwd
          python -VV
          python -m site
          poetry install --extras test
      # Run pytest with coverage reporting
      - name: "Run pytest"
        env: # Or as an environment variable
          CONF_URL: ${{ secrets.CONF_URL }}
          CONF_USERNAME: ${{ secrets.CONF_USERNAME }}
          CONF_PASSWORD: ${{ secrets.CONF_PASSWORD }}
        run: "poetry run pytest tests --cov=${{ env.PACKAGE_NAME }} --cov-report=xml --cov-report term-missing"
      # Upload coverage report to Codecov
      # The 'if' condition checks if the current Python version should report coverage
      # For the first time setup, you should to goto codecov.io, enable your repo,
      # copy the upload token, and create an CODECOV_TOKEN env var in GitHub actions secret
      - name: "Upload coverage to Codecov"
        if: "contains(env.USING_COVERAGE, matrix.python-version)"
        uses: "codecov/codecov-action@v5" # https://github.com/marketplace/actions/codecov
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Authentication token from repository secrets
          slug: ${{ github.repository }} # Repository identifier
          file: ./coverage.xml # Path to the coverage report generated by pytest
          verbose: true # Path to the coverage report generated by pytest
          fail_ci_if_error: true # Fail the workflow if the Codecov upload fails
